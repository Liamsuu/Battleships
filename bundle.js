(()=>{"use strict";var e={523:(e,t,n)=>{n.d(t,{A:()=>s});var o=n(354),r=n.n(o),i=n(314),a=n.n(i)()(r());a.push([e.id,'* {\n  padding: 0;\n  margin: 0;\n}\n\nbody {\n  font-family: system-ui, "Segoe UI", Roboto, Helvetica, Arial, sans-serif,\n    "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100vh;\n  gap: 5rem;\n  background-color: #6b7280;\n}\n\n#player-content,\n#bot-content {\n  display: grid;\n  background-color: #d1d5db;\n  border: 2px solid #f3f4f6;\n  border-radius: 5px;\n  height: 60vh;\n  width: 30vw;\n  grid-template-columns: repeat(10, 1fr);\n  grid-template-rows: repeat(10, 1fr);\n  color: #374151;\n  font-size: 2rem;\n}\n\n#player-content div,\n#bot-content div {\n  display: flex;\n  border: 1px solid #f3f4f6;\n  align-items: center;\n  justify-content: center;\n}\n',"",{version:3,sources:["webpack://./src/index.css"],names:[],mappings:"AAAA;EACE,UAAU;EACV,SAAS;AACX;;AAEA;EACE;4DAC0D;EAC1D,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,aAAa;EACb,SAAS;EACT,yBAAyB;AAC3B;;AAEA;;EAEE,aAAa;EACb,yBAAyB;EACzB,yBAAyB;EACzB,kBAAkB;EAClB,YAAY;EACZ,WAAW;EACX,sCAAsC;EACtC,mCAAmC;EACnC,cAAc;EACd,eAAe;AACjB;;AAEA;;EAEE,aAAa;EACb,yBAAyB;EACzB,mBAAmB;EACnB,uBAAuB;AACzB",sourcesContent:['* {\n  padding: 0;\n  margin: 0;\n}\n\nbody {\n  font-family: system-ui, "Segoe UI", Roboto, Helvetica, Arial, sans-serif,\n    "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100vh;\n  gap: 5rem;\n  background-color: #6b7280;\n}\n\n#player-content,\n#bot-content {\n  display: grid;\n  background-color: #d1d5db;\n  border: 2px solid #f3f4f6;\n  border-radius: 5px;\n  height: 60vh;\n  width: 30vw;\n  grid-template-columns: repeat(10, 1fr);\n  grid-template-rows: repeat(10, 1fr);\n  color: #374151;\n  font-size: 2rem;\n}\n\n#player-content div,\n#bot-content div {\n  display: flex;\n  border: 1px solid #f3f4f6;\n  align-items: center;\n  justify-content: center;\n}\n'],sourceRoot:""}]);const s=a},314:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",o=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),o&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),o&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,o,r,i){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(o)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(a[c]=!0)}for(var d=0;d<e.length;d++){var l=[].concat(e[d]);o&&a[l[0]]||(void 0!==i&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=i),n&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=n):l[2]=n),r&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=r):l[4]="".concat(r)),t.push(l))}},t}},354:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),i="/*# ".concat(r," */");return[t].concat([i]).join("\n")}return[t].join("\n")}},72:e=>{var t=[];function n(e){for(var n=-1,o=0;o<t.length;o++)if(t[o].identifier===e){n=o;break}return n}function o(e,o){for(var i={},a=[],s=0;s<e.length;s++){var c=e[s],d=o.base?c[0]+o.base:c[0],l=i[d]||0,h="".concat(d," ").concat(l);i[d]=l+1;var p=n(h),u={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==p)t[p].references++,t[p].updater(u);else{var f=r(u,o);o.byIndex=s,t.splice(s,0,{identifier:h,updater:f,references:1})}a.push(h)}return a}function r(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,r){var i=o(e=e||[],r=r||{});return function(e){e=e||[];for(var a=0;a<i.length;a++){var s=n(i[a]);t[s].references--}for(var c=o(e,r),d=0;d<i.length;d++){var l=n(i[d]);0===t[l].references&&(t[l].updater(),t.splice(l,1))}i=c}}},659:e=>{var t={};e.exports=function(e,n){var o=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}},540:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},56:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},825:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var o="";n.supports&&(o+="@supports (".concat(n.supports,") {")),n.media&&(o+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(o+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),o+=n.css,r&&(o+="}"),n.media&&(o+="}"),n.supports&&(o+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(o,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},113:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(o){var r=t[o];if(void 0!==r)return r.exports;var i=t[o]={id:o,exports:{}};return e[o](i,i.exports,n),i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0;var o={};(()=>{n.d(o,{Ol:()=>P,tt:()=>B,c5:()=>x,Nh:()=>k,Mj:()=>E});class e{constructor(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];this.shipObjPresent=e,this.hit=t}isShipPresent(){return this.shipObjPresent}setShip(e){this.shipObjPresent=e}setHit(){null!==this.isShipPresent()&&this.isShipPresent().hit(),this.hit=!0}isHit(){return this.hit}}class t{constructor(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];this.length=e,this.hits=t,this.sunk=n}hit(){this.hits+=1}getHits(){return this.hits}isSunk(){return this.hits===this.length}setSunk(){this.sunk=!0}}class r{constructor(){this.gameboard=[[new e,new e,new e,new e,new e,new e,new e,new e,new e,new e],[new e,new e,new e,new e,new e,new e,new e,new e,new e,new e],[new e,new e,new e,new e,new e,new e,new e,new e,new e,new e],[new e,new e,new e,new e,new e,new e,new e,new e,new e,new e],[new e,new e,new e,new e,new e,new e,new e,new e,new e,new e],[new e,new e,new e,new e,new e,new e,new e,new e,new e,new e],[new e,new e,new e,new e,new e,new e,new e,new e,new e,new e],[new e,new e,new e,new e,new e,new e,new e,new e,new e,new e],[new e,new e,new e,new e,new e,new e,new e,new e,new e,new e],[new e,new e,new e,new e,new e,new e,new e,new e,new e,new e]]}allPositions(){let e=[];for(let t=0;t<100;t++)t<10?e.push([0,t]):t>=10&&t<20?e.push([1,t%10]):t>=20&&t<30?e.push([2,t%10]):t>=30&&t<40?e.push([3,t%10]):t>=40&&t<50?e.push([4,t%10]):t>=50&&t<60?e.push([5,t%10]):t>=60&&t<70?e.push([6,t%10]):t>=70&&t<80?e.push([7,t%10]):t>=80&&t<90?e.push([8,t%10]):t>=90&&t<100&&e.push([9,t%10]);return e}randomiseBoard(){const e=["horizontal","vertical"],t=this.allPositions();for(let n=0;n<5;n++){const o=Math.floor(4*Math.random()+2);try{const n=t[Math.floor(Math.random()*t.length)],r=e[Math.floor(Math.random()*e.length)];this.setShipPosition(n[0],n[1],r,o)}catch(e){console.log(e),n-=1}}}resetBoard(){this.gameboard.forEach((t=>{t.forEach((n=>{t.splice(t.indexOf(n),1,new e)}))}))}getShipPositions(){let e=[];return this.gameboard.forEach((function(t,n){t.forEach((function(t,o){null!==t.isShipPresent()&&e.push([n,o])}))})),e}getHitPositions(){let e=[];return this.gameboard.forEach((function(t,n){t.forEach((function(t,o){!0===t.isHit()&&e.push([n,o])}))})),e}checkPosTaken(e,t,n,o){switch(o){case"horizontal":for(let o=0;o<n;o++)if(null!==this.gameboard[e][t+o].isShipPresent())return!0;return!1;case"vertical":for(let o=0;o<n;o++)if(null!==this.gameboard[e-o][t].isShipPresent())return!0;return!1;default:throw"Something went wrong..(check position was typed correctly)"}}setShipPosition(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"",r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:2;o.toLowerCase();const i=new t(r);if("vertical"===o)switch(r){case 2:if(void 0!==this.gameboard[e-1]){if(!0===this.checkPosTaken(e,n,r,o))throw"Position taken";this.gameboard[e][n].setShip(i),this.gameboard[e-1][n].setShip(i);break}case 3:if(void 0!==this.gameboard[e-2]){if(!0===this.checkPosTaken(e,n,r,o))throw"Position taken";this.gameboard[e][n].setShip(i),this.gameboard[e-1][n].setShip(i),this.gameboard[e-2][n].setShip(i);break}case 4:if(void 0!==this.gameboard[e-3]){if(!0===this.checkPosTaken(e,n,r,o))throw"Position taken";this.gameboard[e][n].setShip(i),this.gameboard[e-1][n].setShip(i),this.gameboard[e-2][n].setShip(i),this.gameboard[e-3][n].setShip(i);break}case 5:if(void 0!==this.gameboard[e-4]){if(!0===this.checkPosTaken(e,n,r,o))throw"Position taken";this.gameboard[e][n].setShip(i),this.gameboard[e-1][n].setShip(i),this.gameboard[e-2][n].setShip(i),this.gameboard[e-3][n].setShip(i),this.gameboard[e-4][n].setShip(i);break}default:throw"Invalid position"}else{if("horizontal"!==o)throw"Invalid direction";switch(r){case 2:if(void 0!==this.gameboard[e][n+1]){if(!0===this.checkPosTaken(e,n,r,o))throw"Position taken";this.gameboard[e][n].setShip(i),this.gameboard[e][n+1].setShip(i);break}case 3:if(void 0!==this.gameboard[e][n+2]){if(!0===this.checkPosTaken(e,n,r,o))throw"Position taken";this.gameboard[e][n].setShip(i),this.gameboard[e][n+1].setShip(i),this.gameboard[e][n+2].setShip(i);break}case 4:if(void 0!==this.gameboard[e][n+3]){if(!0===this.checkPosTaken(e,n,r,o))throw"Position taken";this.gameboard[e][n].setShip(i),this.gameboard[e][n+1].setShip(i),this.gameboard[e][n+2].setShip(i),this.gameboard[e][n+3].setShip(i);break}case 5:if(void 0!==this.gameboard[e][n+4]){if(!0===this.checkPosTaken(e,n,r,o))throw"Position taken";this.gameboard[e][n].setShip(i),this.gameboard[e][n+1].setShip(i),this.gameboard[e][n+2].setShip(i),this.gameboard[e][n+3].setShip(i),this.gameboard[e][n+4].setShip(i);break}default:throw"Invalid position"}}}receiveAttack(e,t){this.gameboard[e][t].setHit()}allShipsSunk(){for(let e of this.gameboard)for(let t of e)if(null!==t.isShipPresent()&&!t.isShipPresent().isSunk())return!1;return!0}}class i{constructor(){let e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];this.realPlayer=e,this.playerBoard=new r}}var a=n(72),s=n.n(a),c=n(825),d=n.n(c),l=n(659),h=n.n(l),p=n(56),u=n.n(p),f=n(540),w=n.n(f),m=n(113),g=n.n(m),b=n(523),A={};function v(e,t){const n=t.getShipPositions(),o=t.getHitPositions();e.querySelectorAll("div").forEach((e=>{e.style.backgroundColor="#d1d5db",e.textContent=""})),B.playerBoard===t?n.forEach((t=>{const n=e.querySelector(`[data-position='${t.toString()}']`);B.playerBoard.gameboard[t[0]][t[1]].isHit()&&(n.style.backgroundColor="#71717a")})):n.forEach((t=>{e.querySelector(`[data-position='${t.toString()}']`).style.backgroundColor="#71717a"})),o.forEach((t=>{e.querySelector(`[data-position='${t.toString()}']`).textContent="X"}))}function y(e){const t=document.createElement("div");return e<10?t.dataset.position=`0,${e}`:e>=10&&e<20?t.dataset.position="1,"+e%10:e>=20&&e<30?t.dataset.position="2,"+e%10:e>=30&&e<40?t.dataset.position="3,"+e%10:e>=40&&e<50?t.dataset.position="4,"+e%10:e>=50&&e<60?t.dataset.position="5,"+e%10:e>=60&&e<70?t.dataset.position="6,"+e%10:e>=70&&e<80?t.dataset.position="7,"+e%10:e>=80&&e<90?t.dataset.position="8,"+e%10:e>=90&&e<100&&(t.dataset.position="9,"+e%10),t}A.styleTagTransform=g(),A.setAttributes=u(),A.insert=h().bind(null,"head"),A.domAPI=d(),A.insertStyleElement=w(),s()(b.A,A),b.A&&b.A.locals&&b.A.locals;const S=document.querySelector("#restart-btn"),k=new i(!0),B=new i(!1);k.playerBoard.randomiseBoard(),B.playerBoard.randomiseBoard();const E=document.querySelector("#player-content");for(let e=0;e<100;e++)E.appendChild(y(e));v(E,k.playerBoard);const C=document.querySelector("#bot-content");for(let e=0;e<100;e++)C.appendChild(y(e));v(C,B.playerBoard);const P=C.querySelectorAll("div"),x=new class{constructor(){}inititializeBoardClicks(e,t,n){n.forEach((n=>{n.onclick=()=>{const o=n.dataset.position;e.playerBoard.receiveAttack(Number(o.charAt(0)),Number(o.charAt(2))),v(t,e.playerBoard),!0===e.playerBoard.allShipsSunk()&&(alert("You won!"),this.removeClickableEvents()),this.botTurn()}}))}removeClickableEvents(){document.querySelector("#bot-content").querySelectorAll("div").forEach((e=>{e.onclick=null}))}botTurn(){let e=k.playerBoard.allPositions(),t=e[Math.floor(Math.random()*e.length)];for(;!1!==k.playerBoard.gameboard[t[0]][t[1]].isHit();)e.splice(e.indexOf(t),1),t=e[Math.floor(Math.random()*e.length)];k.playerBoard.receiveAttack(t[0],t[1]),v(E,k.playerBoard),!0===k.playerBoard.allShipsSunk()&&(alert("Bot wins!"),this.removeClickableEvents())}};x.inititializeBoardClicks(B,C,P),S.addEventListener("click",(()=>{!function(e,t,n,o){e.playerBoard.resetBoard(),n.playerBoard.resetBoard(),e.playerBoard.randomiseBoard(),n.playerBoard.randomiseBoard(),v(t,e.playerBoard),v(o,n.playerBoard),x.inititializeBoardClicks(n,o,P)}(k,E,B,C)}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,